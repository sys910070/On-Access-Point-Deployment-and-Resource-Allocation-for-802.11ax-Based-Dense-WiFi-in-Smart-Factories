import numpy as np
import matplotlib.pyplot as plt
import os

environment = ['no_obstacle', 'symmetric_obstacle', 'asymmetric_obstacle', 'real_factory_layout']
# def graph_ap_fairness(t, ap_fairness_dap, ap_fairness_random, ap_fairness_sequential):
#     plt.figure(figsize=(16,12))
#     plt.title('ap_fairness vs time', fontsize = 30)
#     plt.xlabel('time(sec)', fontsize = 30)
#     plt.ylabel('ap_fairness', fontsize = 30)
#     plt.plot(t, ap_fairness_dap, '-o', label = 'DRAO')
#     plt.plot(t, ap_fairness_random, '-o', label = 'random')
#     plt.plot(t, ap_fairness_sequential, '-o', label = 'sequential')
#     plt.xticks(fontsize=20)
#     plt.yticks(fontsize=20)
#     plt.xlim(100, 601)
#     # plt.xlim(0, len(total_throughput_record_dap)+1)
#     plt.ylim(0, 1)
#     plt.legend()
#     plt.savefig(f'fig/{factory_environment}/ap_fairness')
#     # plt.show()

# def graph_device_fairness(t, device_fairness_dap, device_fairness_random, device_fairness_sequential):
#     plt.figure(figsize=(16,12))
#     plt.title('device_fairness vs time', fontsize = 30)
#     plt.xlabel('time(sec)', fontsize = 30)
#     plt.ylabel('device_fairness', fontsize = 30)
#     plt.plot(t, device_fairness_dap, '-o', label = 'DRAO')
#     plt.plot(t, device_fairness_random, '-o', label = 'random')
#     plt.plot(t, device_fairness_sequential, '-o', label = 'sequential')
#     plt.xticks(fontsize=20)
#     plt.yticks(fontsize=20)
#     plt.xlim(100, 601)
#     # plt.xlim(0, len(total_throughput_record_dap)+1)
#     plt.ylim(0, 1)
#     plt.legend()
#     plt.savefig(f'fig/{factory_environment}/device_fairness')
#     # plt.show()

# def graph_total_throughput(t, total_throughput_record_dap, total_throughput_record_random, total_throughput_record_sequential):
#     plt.figure(figsize=(16,12))
#     plt.title('total throughput vs time', fontsize = 30)
#     plt.xlabel('time(sec)', fontsize = 30)
#     plt.ylabel('total throughput', fontsize = 30)
#     plt.plot(t, total_throughput_record_dap, '-o', label = 'DRAO')
#     plt.plot(t, total_throughput_record_random, '-o', label = 'random')
#     plt.plot(t, total_throughput_record_sequential, '-o', label = 'sequential')
#     plt.xticks(fontsize=20)
#     plt.yticks(fontsize=20)
#     plt.xlim(100, 601)
#     # plt.xlim(0, len(total_throughput_record_dap)+1)
#     plt.ylim(0, 8000)
#     plt.legend()
#     plt.savefig(f'fig/{factory_environment}/total_throughput')
#     # plt.show()

# def graph_lost_device(t, lost_device_dap, lost_device_random, lost_device_sequential):
#     plt.figure(figsize=(16,12))
#     plt.title('number of lost devices vs time', fontsize = 30)
#     plt.xlabel('time(sec)', fontsize = 30)
#     plt.ylabel('number of lost devices', fontsize = 30)
#     plt.plot(t, lost_device_dap, '-o', label = 'DRAO')
#     plt.plot(t, lost_device_random, '-o', label = 'random')
#     plt.plot(t, lost_device_sequential, '-o', label = 'sequential')
#     plt.xticks(fontsize=20)
#     plt.yticks(fontsize=20)
#     plt.xlim(100, 601)
#     # plt.xlim(0, len(total_throughput_record_dap)+1)
#     plt.ylim(0, 100)
#     plt.legend()
#     plt.savefig(f'fig/{factory_environment}/lost_device')
#     # plt.show()

# def graph_active_ap(t, active_ap_dap, active_ap_random, active_ap_sequential):
#     plt.figure(figsize=(16,12))
#     plt.title('number of active APs vs time', fontsize = 30)
#     plt.xlabel('time(sec)', fontsize = 30)
#     plt.ylabel('number of active APs', fontsize = 30)
#     plt.plot(t, active_ap_dap, '-o', label = 'DRAO')
#     plt.plot(t, active_ap_random, '-o', label = 'random')
#     plt.plot(t, active_ap_sequential, '-o', label = 'sequential')
#     plt.xticks(fontsize=20)
#     plt.yticks(fontsize=20)
#     plt.xlim(100, 601)
#     # plt.xlim(0, len(total_throughput_record_dap)+1)
#     plt.ylim(0, 81)
#     plt.legend()
#     plt.savefig(f'fig/{factory_environment}/active_ap')
#     # plt.show()

# def loss_device_vs_timer():
#     plt.figure(figsize=(16,12))
#     plt.title('number of lost devices vs timer', fontsize = 30)
#     plt.xlabel('timer(s)', fontsize = 30)
#     plt.ylabel('average number of lost devices', fontsize = 30)
#     plt.bar(['2', '4', '6', '8', '10'], [13.37, 16.27, 18.82, 26.27, 33.49], width = 0.5)
#     plt.xticks(fontsize=20)
#     plt.yticks(fontsize=20)
#     plt.ylim(0, 40)
#     plt.savefig(f'fig/number of lost devices vs timer')

# for factory_environment in environment:
#     ap_fairness_dap = np.load(f'DAP/data/ap_fairness_{factory_environment}.npy')
#     device_fairness_dap = np.load(f'DAP/data/device_fairness_{factory_environment}.npy')
#     total_throughput_record_dap = np.load(f'DAP/data/total_throughput_{factory_environment}.npy')
#     lost_device_dap = np.load(f'DAP/data/lost_device_{factory_environment}.npy')
#     active_ap_dap = np.load(f'DAP/data/active_ap_{factory_environment}.npy')

#     ap_fairness_random = np.load(f'random/data/ap_fairness_{factory_environment}.npy')
#     device_fairness_random = np.load(f'random/data/device_fairness_{factory_environment}.npy')
#     total_throughput_record_random = np.load(f'random/data/total_throughput_{factory_environment}.npy')
#     lost_device_random = np.load(f'random/data/lost_device_{factory_environment}.npy')
#     active_ap_random = np.load(f'random/data/active_ap_{factory_environment}.npy')

#     ap_fairness_sequential = np.load(f'sequential/data/ap_fairness_{factory_environment}.npy')
#     device_fairness_sequential = np.load(f'sequential/data/device_fairness_{factory_environment}.npy')
#     total_throughput_record_sequential = np.load(f'sequential/data/total_throughput_{factory_environment}.npy')
#     lost_device_sequential = np.load(f'sequential/data/lost_device_{factory_environment}.npy')
#     active_ap_sequential = np.load(f'sequential/data/active_ap_{factory_environment}.npy')

#     if not os.path.exists('fig'):
#         os.mkdir('fig/')
#     if not os.path.exists(f'fig/{factory_environment}'):
#         os.mkdir(f'fig/{factory_environment}')
#     t = np.arange(len(ap_fairness_dap))
#     graph_ap_fairness(t[10:61]*10, ap_fairness_dap[10:61], ap_fairness_random[10:61], ap_fairness_sequential[10:61])
#     graph_device_fairness(t[10:61]*10, device_fairness_dap[10:61], device_fairness_random[10:61], device_fairness_sequential[10:61])
#     graph_total_throughput(t[10:61]*10, total_throughput_record_dap[10:61], total_throughput_record_random[10:61], total_throughput_record_sequential[10:61])
#     graph_lost_device(t[10:61]*10, lost_device_dap[10:61], lost_device_random[10:61], lost_device_sequential[10:61])
#     graph_active_ap(t[10:61]*10, active_ap_dap[10:61], active_ap_random[10:61], active_ap_sequential[10:61])

def graph_ap_fairness(t, ap_fairness, ap_fairness_test):
    plt.figure(figsize=(16,12))
    plt.title('ap_fairness vs time', fontsize = 30)
    plt.xlabel('time(sec)', fontsize = 30)
    plt.ylabel('ap_fairness', fontsize = 30)
    plt.plot(t, ap_fairness, '-o', label = 'without')
    plt.plot(t, ap_fairness_test, '-o', label = 'with')
    plt.xticks(fontsize=20)
    plt.yticks(fontsize=20)
    plt.xlim(100, 601)
    # plt.xlim(0, len(total_throughput_record_dap)+1)
    plt.ylim(0, 1)
    plt.legend()
    plt.savefig(f'fig/{factory_environment}/ap_fairness')
    # plt.show()

def graph_device_fairness(t, device_fairness, device_fairness_test):
    plt.figure(figsize=(16,12))
    plt.title('device_fairness vs time', fontsize = 30)
    plt.xlabel('time(sec)', fontsize = 30)
    plt.ylabel('device_fairness', fontsize = 30)
    plt.plot(t, device_fairness, '-o', label = 'without')
    plt.plot(t, device_fairness_test, '-o', label = 'with')
    plt.xticks(fontsize=20)
    plt.yticks(fontsize=20)
    plt.xlim(100, 601)
    # plt.xlim(0, len(total_throughput_record_dap)+1)
    plt.ylim(0, 1)
    plt.legend()
    plt.savefig(f'fig/{factory_environment}/device_fairness')
    # plt.show()

def graph_total_throughput(t, total_throughput_record, total_throughput_record_test):
    plt.figure(figsize=(16,12))
    plt.title('total throughput vs time', fontsize = 30)
    plt.xlabel('time(sec)', fontsize = 30)
    plt.ylabel('total throughput', fontsize = 30)
    plt.plot(t, total_throughput_record, '-o', label = 'without')
    plt.plot(t, total_throughput_record_test, '-o', label = 'with')
    plt.xticks(fontsize=20)
    plt.yticks(fontsize=20)
    plt.xlim(100, 601)
    # plt.xlim(0, len(total_throughput_record_dap)+1)
    plt.ylim(0, 8000)
    plt.legend()
    plt.savefig(f'fig/{factory_environment}/total_throughput')
    # plt.show()

def graph_lost_device(t, lost_device, lost_device_test):
    plt.figure(figsize=(16,12))
    plt.title('number of lost devices vs time', fontsize = 30)
    plt.xlabel('time(sec)', fontsize = 30)
    plt.ylabel('number of lost devices', fontsize = 30)
    plt.plot(t, lost_device, '-o', label = 'without')
    plt.plot(t, lost_device_test, '-o', label = 'with')
    plt.xticks(fontsize=20)
    plt.yticks(fontsize=20)
    plt.xlim(100, 601)
    # plt.xlim(0, len(total_throughput_record_dap)+1)
    plt.ylim(0, 100)
    plt.legend()
    plt.savefig(f'fig/{factory_environment}/lost_device')
    # plt.show()

def graph_active_ap(t, active_ap, active_ap_test):
    plt.figure(figsize=(16,12))
    plt.title('number of active APs vs time', fontsize = 30)
    plt.xlabel('time(sec)', fontsize = 30)
    plt.ylabel('number of active APs', fontsize = 30)
    plt.plot(t, active_ap, '-o', label = 'without')
    plt.plot(t, active_ap_test, '-o', label = 'with')
    plt.xticks(fontsize=20)
    plt.yticks(fontsize=20)
    plt.xlim(100, 601)
    # plt.xlim(0, len(total_throughput_record_dap)+1)
    plt.ylim(0, 81)
    plt.legend()
    plt.savefig(f'fig/{factory_environment}/active_ap')
    # plt.show()
    
for factory_environment in environment:
    ap_fairness = np.load(f'DAP/data/ap_fairness_{factory_environment}.npy')
    device_fairness = np.load(f'DAP/data/device_fairness_{factory_environment}.npy')
    total_throughput_record = np.load(f'DAP/data/total_throughput_{factory_environment}.npy')
    lost_device = np.load(f'DAP/data/lost_device_{factory_environment}.npy')
    active_ap = np.load(f'DAP/data/active_ap_{factory_environment}.npy')

    ap_fairness_test = np.load(f'DAP/data/test_ap_fairness_{factory_environment}.npy')
    device_fairness_test = np.load(f'DAP/data/test_device_fairness_{factory_environment}.npy')
    total_throughput_record_test = np.load(f'DAP/data/test_total_throughput_{factory_environment}.npy')
    lost_device_test = np.load(f'DAP/data/test_lost_device_{factory_environment}.npy')
    active_ap_test = np.load(f'DAP/data/test_active_ap_{factory_environment}.npy')

    if not os.path.exists('fig'):
        os.mkdir('fig/')
    if not os.path.exists(f'fig/{factory_environment}'):
        os.mkdir(f'fig/{factory_environment}')
    t = np.arange(len(ap_fairness))
    graph_ap_fairness(t[10:61]*10, ap_fairness[10:61], ap_fairness_test[10:61])
    graph_device_fairness(t[10:61]*10, device_fairness[10:61], device_fairness_test[10:61])
    graph_total_throughput(t[10:61]*10, total_throughput_record[10:61], total_throughput_record_test[10:61])
    graph_lost_device(t[10:61]*10, lost_device[10:61], lost_device_test[10:61])
    graph_active_ap(t[10:61]*10, active_ap[10:61], active_ap_test[10:61])